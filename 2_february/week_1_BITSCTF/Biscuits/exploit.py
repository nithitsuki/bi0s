#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./Biscuits/main
from pwn import *
import ctypes
# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './main')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:      Full RELRO
# Stack:      Canary found
# NX:         NX enabled
# PIE:        PIE enabled
# SHSTK:      Enabled
# IBT:        Enabled
# Stripped:   No

io = start()

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)
# offset_values = [800,544,768,768,512,800,512,800,256,544,256,256,768,768,768,544,800,512,544,768,0,768,800,32,800,512,288,768,256,32,512,0,800,256,32,288,256,512,256,512,288,544,32,32,512,768,544,544,256,256,544,544,0,288,544,0,32,0,800,512,256,288,544,32,768,768,288,256,512,768,800,800,288,0,800,32,768,544,768,32,32,256,544,256,800,256,256,768,256,288,288,544,800,0,512,544,0,0,800,512]
libc = ctypes.CDLL('/usr/lib/libc.so.6')
libc.srand(libc.time(0))
for i in range(100):
    print((libc.rand() % 100) * 8)
io.interactive()
